<?php

namespace Blog\Bundle\BlogBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * PostRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PostRepository extends EntityRepository
{
    public function findAllByNewest()
    {
        return $this->createQueryBuilder('p')
            ->select('p', 'c')
            ->leftJoin('p.comments', 'c')
            ->OrderBy('p.createdAt')
            ->getQuery()
            ->getResult()
            ;
    }

    public function mostPopularPosts($limit)
    {
        return $this->createQueryBuilder('p')
            ->orderBy('p.visitedIncrement', 'DESC')
            ->setMaxResults($limit)
            ->getQuery()
            ->getResult()
            ;
    }

    public function visitedIncrement($id)
    {
        $query = $this->getEntityManager()
            ->createQuery('UPDATE BlogBlogBundle:Post p SET p.visitedIncrement = p.visitedIncrement + 1 WHERE p.id = :post_id')
            ->setParameter(':post_id', $id);

        $query->execute();
    }

    public function getTags()
    {
        $postTags = $this->createQueryBuilder('p')
            ->select('p.tags')
            ->getQuery()
            ->getResult();


        $tags = array();
        foreach ($postTags as $postTag)
        {
            $tags = array_merge(explode(",", $postTag['tags']), $tags);
        }

        foreach ($tags as &$tag)
        {
            $tag = trim($tag);
        }

        return $tags;
    }

    public function getTagWeights($tags)
    {
        $tagWeights = array();

        if(empty($tags)) {
            return $tagWeights;
        }

        foreach ($tags as $tag)
        {
            $tagWeights[$tag] = (isset($tagWeights[$tag])) ? $tagWeights[$tag]+1 : 1;
        }

        $max = max($tagWeights);

        $multiple = ($max > 5) ? 5 / $max :1;
        foreach ($tagWeights as &$tag)
        {
            $tag = ceil($tag * $multiple);
        }

        return $tagWeights;

    }
}
